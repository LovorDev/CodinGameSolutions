using System;
using System.Collections.Generic;
using System.Linq;

namespace SummerChallenge2023
{
    public class ExploitingSuperpowers_5
    {
        private static int[] visited; // массив посещенных вершин

        /**
         * @param nGears An integer representing the number of gears in the system (numbered from 0 to N-1).
         * @param connections An array representing all pairs of gears connected together.
         * @return An array of two integers representing the number of gears rotating clockwise and counterclockwise respectively, or [-1, -1] if the configuration is invalid.
         */
        public static List<int> GearBalance(int nGears, List<List<int>> connections)
        {
            // Write your code here
            visited = new int[nGears];
            var graph = BuildGraph(nGears, connections);
            var correct = true;
            
            correct = DFS(0, graph, 1);

            return correct
                ? new List<int> { visited.Count(x => x == 1), visited.Count(x => x == -1) }
                : new List<int> { -1, -1 };
        }

        private static bool DFS(int v, List<List<int>> graph, int p)
        {
            visited[v] = p;
            var correct = true;
            foreach (var w in graph[v])
            {
                if (visited[w] == 0)
                {
                    correct = DFS(w, graph, -p);
                }

                if (visited[w] == p || !correct)
                {
                    return false;
                }
            }

            return true;
        }

        static List<List<int>> BuildGraph(int nGears, List<List<int>> edges)
        {
            var graph = new List<List<int>>();

            for (int i = 0; i < nGears; i++)
            {
                graph.Add(new List<int>());
            }

            foreach (var edge in edges)
            {
                int v1 = edge[0];
                int v2 = edge[1];

                graph[v1].Add(v2);
                graph[v2].Add(v1);
            }

            return graph;
        }
    }
}